name: Chocolatine

on:
  push:
    branches:
      - main

env:
  MIRROR_URL: git@github.com:EpitechPromo2027/B-DOP-200-BDX-2-1-chocolatine-tom.bouisset.git
  EXECUTABLES: pushswap,antman/antman,giantman/giantman,mysh,bsq

jobs:
  check_coding_style:
      runs-on: ubuntu-latest
      container:
        image: ghcr.io/epitech/coding-style-checker:latest

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run coding style checker
        run: |
          check.sh $(pwd) $(pwd) 2>&1 | tee coding_style_errors.txt
          echo "::set-output name=number_of_errors::$(grep -c 'Error' coding_style_errors.txt)"
          cat coding_style_errors.txt | awk -F: '/Error/ { print "::error file=" $1 ",line=" $2 ",col=" $3 "::" $4 }'
        id: check_coding_style_output

      - name: Fail if there are any coding style errors
        if: steps.check_coding_style_output.outputs.number_of_errors > 0
        run: exit 1

  check_program_compilation:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Run make command with 2 minutes timeout
      run: timeout 2m make

    - name: Run make clean
      run: make clean

    - name: Check executables
      run: |
        for executable in ${EXECUTABLES//,/ }; do
          if [[ ! -x "$executable" ]]; then
            echo "$executable not found or not executable"
            exit 1
          else
            echo "$executable is found and executable"
          fi
        done

  run_tests:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Run tests with 2 minutes timeout
      run: timeout 2m make tests_run

  push_to_mirror:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GIT_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          ssh-keyscan -t rsa ${{ env.MIRROR_URL }} >> ~/.ssh/known_hosts
      - name: Mirror to repository
        uses: pixta-dev/repository-mirroring-action@v1.0.0
        with:
          mirror-url: ${{ env.MIRROR_URL }}
          ssh-private-key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
